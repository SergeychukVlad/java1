Задача 1. Классы Animal, Cow, Hamster, Duck
1.1 Для класса Animal из задач 1 и 2, домашнего задания к уроку 5 реализовать метод:
public boolean equals(Object anObject), который возвращает true, если объекты равны и false если не равны
по параметру - вес животного. Убедится, что при равном весе, утка все равно не равна хомяку.
Обратите внимание на тип принимаемого параметра и подумайте над тем, что будет делать ваша программа,
если в качестве параметра будет передан объект не являющийся экземпляром Animal.

Для класса Animal реализовать интерфейс FoodCompare, который сравнивает животных по цене потребляемой еды.
public interface FoodCompare {
    public int compareFoodPrice();
}

Для этого
1.2 В класс Animal добавить метод
public double getFood1kgPrice(), который возвращает информацию о цене 1 кг еды.
метод реализовать в виде switch по FoodKind со следующими значениями
HAY : 20
CORN: 50
UNKNOWN: 0

1.3 В класс Animal добавить метод
public double getFoodPrice(), который возвращает информацию о цене еды для данного животного по формуле
calculateFoodWeight() * getFood1kgPrice()

1.4 В отдельном файле объявить interface FoodCompare
interface FoodCompare {
    public int compareFoodPrice(Animal animal);
}

1.5 В класс Animal реализовать
public int compareFoodPrice(Animal aminal), который возвращает результаты сравнения цены еды для данного животного
с ценой еды для другого животного, используя Double.compare;


Задача 2. Класс CalculateFibonacci
Задача на динамическое программирование. Это когда некоторые результаты сохраняются для последующего использования.
Для функции public static int fiboNumber(int n) из задачи 3 урока 4 сделать сохранение одного,
последнего из рассчитанных значений. Для этого

2.1 Разместить в классе CalculateFibonacci функцию
public static int fiboNumber(int n)

2.2 Разместить вложенный класс
public static class CacheInfo, содержащий пару свойств

    public int n - число, для которого рассчитываем Фибоначчи
    public int fibo - результат расчета

2.3 Разместить в классе CalculateFibonacci приватную статическую переменную CacheInfo lastFibo;

2.4 В статической функции fiboNumber, проверять параметр n на совпадение с последним рассчитанным значением,
и если совпадает - возвращать уже готовый результат. Если не совпадает - рассчитывать и сохранять в статической
переменной lastFibo.

2.5 Реализовать метод public static CacheInfo getLastFibo() который возвращает lastFibo

2.6 Реализовать метод public static void clearLastFibo(), который сбрасывает lastFibo в null


Задача 3. Сортировка интерфейса на основе ArraySort

3.1 Создать интерфейс CompareWeight
3.2 В нем создать public enum CompareResult, со значениями LESS, EQUAL, GREATER
3.3 Интерфейс должен содержать метод public CompareResult compareWeight(CompareWeight smthHasWeigt)

3.4 Для класса Animal реализовать интерфейс CompareWeight..Сравнение сделать на основе веса животного.
Метод CompareResult compareWeight должен возвращать
LESS если свой вес < веса параметра метода
EQUAL если свой вес = веса параметра метода
GREATER если свой вес > веса параметра метода

3.5 Создать класс Food (еда), которое никак не связано иерархией наследования с Animal.
3.6 В классе Food разместить приватную переменную int weight - вес еды в граммах, реализовать в классе конструктор,
принимающий и устанавливающий значение веса.
3.7 Реализовать метод public int getWeight(), возвращающий сохраненное значение веса.
3.7 Для класса Food реализовать интерфейс CompareWeight.
Сравнение сделать на основе веса еды.
Метод CompareResult compareWeight должен возвращать
LESS если свой вес < веса параметра метода
EQUAL если свой вес = веса параметра метода
GREATER если свой вес > веса параметра метода

3.8 Скопировать реализацию сортировки из класса ArraySort из задачи 2 урока 6 и переделать сортировку
массива целых чисел на сортировку через интерфейс
CompareWeight public static void sort(CompareWeight[] a)